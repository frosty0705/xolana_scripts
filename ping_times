import requests
import json
import time
from ping3 import ping
from collections import defaultdict
from statistics import mean

# URL to fetch validators data
VALIDATORS_URL = 'https://xolana.xen.network'

# Headers for the request
HEADERS = {
    'Content-Type': 'application/json',
}

# Request payload to get validators
payload = json.dumps({
    "jsonrpc": "2.0",
    "id": 1,
    "method": "getClusterNodes"
})

def fetch_validators(url, headers, payload):
    try:
        response = requests.post(url, headers=headers, data=payload)
        response.raise_for_status()
        return response.json()['result']
    except requests.RequestException as e:
        print(f"Error fetching validators: {e}")
        return []

def measure_ping_times(validators):
    ping_results = defaultdict(list)
    while True:
        for validator in validators:
            ip_address = validator.get('gossip', '').split(':')[0]
            if ip_address:
                try:
                    ping_time = ping(ip_address, timeout=1)
                    if ping_time is not None:
                        ping_results[ip_address].append(ping_time)
                    else:
                        ping_results[ip_address].append(float('inf'))
                except Exception as e:
                    ping_results[ip_address].append(float('inf'))
        print_summary_table(ping_results)  # Print summary table after each iteration
        time.sleep(5)  # Sleep for 5 seconds before next iteration
        ping_results.clear()  # Clear results for the next iteration

def print_summary_table(ping_results):
    print(f"{'IP Address':<20} {'Avg Ping Time (s)':<20} {'Min Ping Time (s)':<20} {'Max Ping Time (s)':<20}")
    print("="*80)
    for ip, times in ping_results.items():
        valid_times = [t for t in times if t != float('inf')]
        if valid_times:
            avg_time = mean(valid_times)
            min_time = min(valid_times)
            max_time = max(valid_times)
        else:
            avg_time = min_time = max_time = float('inf')
        print(f"{ip:<20} {avg_time:<20.6f} {min_time:<20.6f} {max_time:<20.6f}")

def main():
    # Fetch the validators
    validators = fetch_validators(VALIDATORS_URL, HEADERS, payload)
    if not validators:
        print("No validators fetched.")
        return
    
    # Measure ping times indefinitely
    measure_ping_times(validators)

if __name__ == "__main__":
    main()
